#!/usr/bin/env node

"use strict";

var commander = require("commander");
var chalk = require("chalk");
var pkg = require("../package.json");
var GXClient = require("../dist/index.js").GXClient;

var client = new GXClient();

if (process.argv.indexOf("-v") > -1) {
    console.log(pkg.version);
    process.exit(0);
}

commander.version(pkg.version)
    .option("-v --version", "print gxclient version")
    .usage("[cmd]");

const MSG_PREFIX = chalk.green("[GXClient]");

function displayUsage() {
    console.log("");
    console.log(chalk.green("[USAGE]"), ": gxclient <command> [options]");
    console.log("");
    console.log("gxclient -h, --help            all available commands and options");
    console.log("gxclient list|ls               list all apis");
    console.log("gxclient <command> -h          help on a specific command");
    console.log("");
}

function displayExamples() {
    console.log("- Generate key pairs:");
    console.log("");
    console.log(chalk.cyan("  $ gxclient generate_key"));
    console.log("");
    console.log("- Register an account:");
    console.log("");
    console.log(chalk.cyan("  $ gxclient register my-account GXC5XPhC4ZqxmqVAhwphbBMahpu1KPJb22KeQMpYFBHB14EF76tsx"));
    console.log("");
    console.log("- Account API:");
    console.log("");
    console.log(chalk.cyan("  $ gxclient get_account gxchain-test-account"));
    console.log(chalk.cyan("  $ gxclient get_account_balances gxchain-test-account"));
    console.log(chalk.cyan("  $ gxclient transfer gxb123 \"10 GXS\" \"Hi There\" -p <private_key> -a <account_id> -t <true|false>"));
    console.log("");
    console.log("- Asset API:");
    console.log("");
    console.log(chalk.cyan("  $ gxclient get_asset GXS"));
    console.log("");
    console.log("- Block API:");
    console.log("");
    console.log(chalk.cyan("  $ gxclient get_block 100"));
    console.log("");
    console.log("- Object API:");
    console.log("");
    console.log(chalk.cyan("  $ gxclient get_object 2.1.0"));
    console.log("");
    console.log("- Contract API :");
    console.log("");
    console.log(chalk.cyan("  $ gxclient get_contract_abi bank -t <true|false>"));
    console.log(chalk.cyan("  $ gxclient get_contract_tables bank -t <true|false>"));
    console.log(chalk.cyan("  $ gxclient get_table_objects redpacket packet 0 100 -t <true|false>"));
    console.log(chalk.cyan("  $ gxclient call_contract bank deposit \"\" \"10 GXS\" -p <private_key> -a <account_id> -t <true|false>"));
    console.log("");
    console.log("Check the full documentation on https://github.com/gxchain/gxclient-node");
    console.log("");
}

commander.command("list")
    .alias("ls")
    .description("List all apis")
    .action(() => {
        console.log(MSG_PREFIX + chalk.grey(" usage examples:\n"));
        displayExamples();
        process.exit(1);
    });


commander.command("generate_key")
    .description("Generate gxchain key pairs")
    .usage("aaa")
    .action(() => {
        let result = client.generateKey();
        console.log(chalk.green(JSON.stringify(result, null, "  ")));
    });

commander.command("register <account_name> <public_key>")
    .description("Register gxchain account")
    .action((account_name, public_key) => {
        client.register(account_name, public_key).then(result => {
            console.log(chalk.green(JSON.stringify(result, null, "  ")));
        });
    });

commander.command("get_account <account_name>")
    .description("Get account information by account_name")
    .action((account_name) => {
        client.getAccount(account_name).then(result => {
            console.log(chalk.green(JSON.stringify(result, null, "  ")));
        });
    });

commander.command("get_object <object_id>")
    .description("Get object by object_id")
    .action((object_id) => {
        client.getObject(object_id).then(result => {
            console.log(chalk.green(JSON.stringify(result, null, "  ")));
        });
    });

commander.command("get_account_balances <account_name>")
    .alias("get_account_balance")
    .description("Get account balances by account_name")
    .action((account_name) => {
        client.getAccountBalances(account_name).then(result => {
            console.log(chalk.green(JSON.stringify(result, null, "  ")));
        });
    });

commander.command("get_asset <symbol>")
    .description("Get asset info by asset symbol")
    .action((symbol) => {
        client.getAsset(symbol.toUpperCase()).then(result => {
            console.log(chalk.green(JSON.stringify(result, null, "  ")));
            process.exit(1);
        }).catch(ex => {
            console.error(chalk.red(ex));
            process.exit(1);
        });
    });

commander.command("get_block <block_height>")
    .description("Get asset info by asset symbol")
    .action((block_height) => {
        client.getBlock(block_height).then(result => {
            console.log(chalk.green(JSON.stringify(result, null, "  ")));
            process.exit(1);
        });
    });

commander.command("transfer <to> <memo> <amount_asset> [boradcast]")
    .option("-a --account_id [account_id]", "[string] account id")
    .option("-p --private_key [private_key]", "[string] private key")
    .option("-t --testnet [testnet]", "[boolean] testnet")
    .description("Send a transfer transaction")
    .action((to, memo, amount_asset, broadcast, opt) => {
        client = new GXClient(opt.private_key, opt.account_id, opt.testnet ? "wss://testnet.gxchain.org" : "wss://node1.gxb.io");
        if (amount_asset.indexOf(" ") == -1) {
            console.error(chalk.red("Incorrect format of asset, eg. \"100 GXS\""));
            process.exit(1);
        }
        let amount = Number(amount_asset.split(" ")[0]);
        let asset = amount_asset.split(" ")[1];
        client.getAsset(asset).then(asset => {
            client.transfer(to, memo, {
                amount: amount,
                asset_id: asset.id,
                precision: asset.precision
            }, broadcast).then(result => {
                console.log(chalk.green(JSON.stringify(result, null, "  ")));
                process.exit(1);
            }).catch(ex => {
                console.error(chalk.red(ex));
                process.exit(1);
            });
        }).catch(ex => {
            console.error(chalk.red(ex));
            process.exit(1);
        });
    });

commander.command("call_contract <contract_name> <method_name> <params> [amount_asset] [boradcast]")
    .option("-a --account_id [account_id]", "[string] account id")
    .option("-p --private_key [private_key]", "[string] private key")
    .option("-t --testnet [testnet]", "[boolean] testnet")
    .description("Call smart contract method")
    .action((contract_name, method_name, params, amount_asset, broadcast, opt) => {
        client = new GXClient(opt.private_key, opt.account_id, opt.testnet ? "wss://testnet.gxchain.org" : "wss://node1.gxb.io");
        if (amount_asset) {
            if (amount_asset.indexOf(" ") == -1) {
                console.error(chalk.red("Incorrect format of asset, eg. \"100 GXS\""));
                process.exit(1);
            }
            let amount = Number(amount_asset.split(" ")[0]);
            let asset = amount_asset.split(" ")[1];
            client.getAsset(asset).then(asset => {
                innerCall({amount: client._accMult(amount, Math.pow(10, asset.precision)), asset_id: asset.id});
            });
        } else {
            innerCall(null);
        }

        function innerCall(asset_amout) {
            client.callContract(contract_name, method_name, JSON.parse(params), asset_amout, broadcast).then(result => {
                console.log(result);
            }).catch(ex => {
                console.error(chalk.red(ex));
                process.exit(1);
            });
        }
    });

commander.command("get_contract_tables <contract_name>")
    .option("-t --testnet [testnet]", "[boolean] testnet")
    .description("get contract table by contract_name")
    .action((contract_name, opt) => {
        client = new GXClient(opt.private_key, opt.account_id, opt.testnet ? "wss://testnet.gxchain.org" : "wss://node1.gxb.io");
        client.getContractTable(contract_name).then((result) => {
            console.log(chalk.green(JSON.stringify(result, null, "  ")));
        });
    });

commander.command("get_contract_abi <contract_name>")
    .option("-t --testnet [testnet]", "[boolean] testnet")
    .description("get contract abi by contract_name")
    .action((contract_name, opt) => {
        client = new GXClient(opt.private_key, opt.account_id, opt.testnet ? "wss://testnet.gxchain.org" : "wss://node1.gxb.io");
        client.getContractABI(contract_name).then((result) => {
            console.log(chalk.green(JSON.stringify(result, null, "  ")));
        });
    });

commander.command("get_table_objects <contract_name> <table_name> [start] [limit]")
    .option("-t --testnet [testnet]", "[boolean] testnet")
    .description("get table records by contract_name and table_name")
    .action((contract_name, table_name, start = 0, limit = 100, opt) => {
        client = new GXClient(opt.private_key, opt.account_id, opt.testnet ? "wss://testnet.gxchain.org" : "wss://node1.gxb.io");
        client.getTableObjects(contract_name, table_name, start, limit).then((result) => {
            console.log(chalk.green(JSON.stringify(result, null, "  ")));
        });
    });

//
// Catch all
//
commander.command("*")
    .action(function () {
        console.log(MSG_PREFIX + " Command not found\n");
        displayUsage();
        // Check if it does not forget to close fds from RPC
        process.exit(1);
    });

//
// Display help if 0 arguments passed to pm2
//
if (process.argv.length == 2) {
    commander.parse(process.argv);
    displayUsage();
    // Check if it does not forget to close fds from RPC
    process.exit(1);
} else {
    commander.parse(process.argv);
}
